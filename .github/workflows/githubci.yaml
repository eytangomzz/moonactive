name: Lint, Build, Push to ECR and deploy using Helm

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flask requests
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')

  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2


      # - name: Build and Tag Docker Image
      #   env:
      #     REGISTRY: ${{ steps.ecr-login.outputs.registry }}
      #     REPOSITORY: ${{ secrets.REPOSITORY }}
      #   run: |
      #     IMAGE_TAG=${GITHUB_RUN_NUMBER} 
      #     AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      #     ECR_URL=$AWS_ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY }}

      #     echo "Building Docker image with tag: $IMAGE_TAG"
      #     docker build -t $ECR_URL:$IMAGE_TAG -f app/Dockerfile .
      #     docker tag $ECR_URL:$IMAGE_TAG $ECR_URL:$IMAGE_TAG
      - name: Build Application Docker image
        run: |
          docker build -f app/Dockerfile -t ${{ secrets.REPOSITORY }}:${{ github.run_number }} .
          docker build -f app/Dockerfile.test -t test-image .
          docker compose up --abort-on-container-exit
  
      # - name: Run Test
      #   run: |
      #     docker network create test-network
      #     docker run -d --rm --network test-network --name test-app \
      #       -p 5000:5000 ${{ secrets.REPOSITORY }}:${{ github.run_number }}
      #     sleep 5
      #     docker run --rm --network test-network test-image
      #   env:
      #     BASE_URL: http://test-app:5000

      - name: Push Docker Image to Amazon ECR
        env:
          REPOSITORY: ${{ secrets.REPOSITORY }}
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          docker tag ${{ secrets.REPOSITORY }}:${{ github.run_number }} ${{ steps.ecr-login.outputs.registry }}/${{ secrets.REPOSITORY }}:${{ github.run_number }}
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ secrets.REPOSITORY }}:${{ github.run_number }}
    
  deploy:
    name: Deploy the application using helm
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2


      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kube config
        env:
          EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION }}
            
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install my-app ./helm \
            --set deployment.oddApp.repository=${{ steps.ecr-login.outputs.registry }}/${{ secrets.REPOSITORY }} \
            --set deployment.oddApp.tag=${GITHUB_RUN_NUMBER} \
            --namespace moonactive \
            --create-namespace      